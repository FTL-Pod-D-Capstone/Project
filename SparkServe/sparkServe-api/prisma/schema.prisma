// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DEPLOYED_DATABASE_URL")
}

model user {
  userId          Int       @id @default(autoincrement())
  userName        String
  firstName       String
  lastName        String
  email           String    @unique
  password        String
  phoneNumber     String
  profilePicture  String
  bio             String
  address         String
  createdAt       DateTime  @default(now())
  feedbacks       feedback[]                              // One-to-many relation with Feedback
  chatBotInteractions chatBotInteraction[]               // One-to-many relation with ChatBotInteraction
  notifications   notification[]                          // One-to-many relation with Notification
  registrations   registration[]                          // One-to-many relation with Registration
}

model organization {
  organizationId  Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  password        String
  description     String
  address         String
  website         String
  contactEmail    String
  logo            String
  createdAt       DateTime  @default(now())
  opportunities   opportunity[]                           // One-to-many relation with Opportunity
}

model opportunity {
  opportunityId   Int       @id @default(autoincrement())
  title           String
  description     String
  organizationId  Int
  address         String
  dateTime        DateTime
  skillsRequired  String
  spotsAvailable  Int
  ageRange        String
  createdAt       DateTime  @default(now())
  organization    organization @relation(fields: [organizationId], references: [organizationId]) // Relation to Organization
  feedbacks       feedback[]                              // One-to-many relation with Feedback
  registrations   registration[]                          // One-to-many relation with Registration
}

model chatBotInteraction {
  interactionId   Int       @id @default(autoincrement())
  userId          Int
  message         String
  response        String
  timestamp       DateTime  @default(now())
  user            user      @relation(fields: [userId], references: [userId])
}

model feedback {
  feedbackId      Int       @id @default(autoincrement())
  userId          Int
  opportunityId   Int
  rating          Int
  comments        String
  timestamp       DateTime  @default(now())
  user            user      @relation(fields: [userId], references: [userId]) // Relation to User
  opportunity     opportunity @relation(fields: [opportunityId], references: [opportunityId]) // Relation to Opportunity
}

model notification {
  notificationId  Int       @id @default(autoincrement())
  userId          Int
  message         String
  type            String
  readStatus      Boolean   @default(false)
  timestamp       DateTime  @default(now())
  user            user      @relation(fields: [userId], references: [userId]) // Relation to User
  }

model registration {
  registrationId  Int       @id @default(autoincrement())
  userId          Int
  opportunityId   Int
  registrationTime DateTime @default(now())
  status          String
  user            user      @relation(fields: [userId], references: [userId]) // Relation to User
  opportunity     opportunity @relation(fields: [opportunityId], references: [opportunityId]) // Relation to Opportunity
}
